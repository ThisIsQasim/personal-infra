---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pihole-custom-dnsmasq
  labels:
    app: pihole
data:
  02-custom.conf: |
    addn-hosts=/etc/addn-hosts
    rev-server=y.y.y.y
    server=/home.home.com/y.y.y.y
    server=//y.y.y.y
  05-pihole-custom-cname.conf: ""
  addn-hosts: ""
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pihole-custom-lists
  labels:
    app: pihole
data:
  regex.list: |
    (^|\.)tunnelbear\.com$
    (^|\.)acloudvideos\.com$
    (^|\.)home\.com;querytype=HTTPS
    (^|\.)siasat\.pk;querytype=HTTPS
    (^|\.)twitter\.com;reply=y.y.y.y
    (^|\.)twitter\.com;querytype=HTTPS
    (^|\.)twimg\.com;reply=y.y.y.y
    (^|\.)twimg\.com;querytype=HTTPS
  blacklist.txt: |
    www.hibids10.com
    api.tunnelbear.com
    doh.dns.apple
  whitelist.txt: |
    thepiratebay.org
    slides.google.com
    rpm.newrelic.com
    www.rapidvideo.com
    ip-api.com
    pro.ip-api.com
    one.newrelic.com
    trace.svc.ui.com
    api.keen.io
    cdn.jsdelivr.net
---
apiVersion: v1
kind: Service
metadata:
  name: pihole-dhcp
  labels:
    app: pihole
spec:
  externalTrafficPolicy: Local
  ports:
  - name: client-udp
    port: 67
    protocol: UDP
    targetPort: client-udp
  selector:
    app: pihole
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  name: pihole-dns
  labels:
    app: pihole
spec:
  externalTrafficPolicy: Local
  loadBalancerIP: y.y.y.y
  ports:
  - name: dns
    port: 53
    protocol: TCP
    targetPort: dns
  - name: dns-udp
    port: 53
    protocol: UDP
    targetPort: dns-udp
  selector:
    app: pihole
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: pihole
  name: pihole-web
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  - name: https
    port: 443
    protocol: TCP
    targetPort: https
  selector:
    app: pihole
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: pihole
  name: pihole
spec:
  replicas: 2
  selector:
    matchLabels:
      app: pihole
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: pihole
    spec:
      containers:
      - env:
        - name: WEB_PORT
          value: "80"
        - name: VIRTUAL_HOST
          value: pi.hole
        - name: PIHOLE_DNS_
          value: 127.0.0.1#5353
        - name: TZ
          value: 'Asia/Karachi'
        - name: RESOLVE_IPV6
          value: "no"
        - name: DNSMASQ_LISTENING
          value: "all"
        - name: FTLCONF_BLOCK_ESNI
          value: "false"
        - name: FTLCONF_EDNS0_ECS
          value: "false"
        - name: FTLCONF_BLOCK_ICLOUD_PR
          value: "false"
        - name: DNSSEC
          value: "false"
        envFrom:
        - secretRef:
            name: pihole
        image: pihole/pihole:latest
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /admin/index.php
            port: http
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
        name: pihole
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 53
          name: dns
          protocol: TCP
        - containerPort: 53
          name: dns-udp
          protocol: UDP
        - containerPort: 443
          name: https
          protocol: TCP
        - containerPort: 67
          name: client-udp
          protocol: UDP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /admin/index.php
            port: http
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
        resources: {}
        securityContext:
          privileged: false
        volumeMounts:
        - mountPath: /etc/pihole
          name: config
        - mountPath: /etc/dnsmasq.d/02-custom.conf
          name: custom-dnsmasq
          subPath: 02-custom.conf
        - mountPath: /etc/addn-hosts
          name: custom-dnsmasq
          subPath: addn-hosts
        - mountPath: /etc/pihole/whitelist.txt
          name: custom-lists
          subPath: whitelist.txt
        - mountPath: /etc/pihole/blacklist.txt
          name: custom-lists
          subPath: blacklist.txt
        - mountPath: /etc/pihole/regex.list
          name: custom-lists
          subPath: regex.list
      - name: dnsproxy
        image: adguard/dnsproxy
        imagePullPolicy: Always
        args:
        - --port=5353
        - --upstream=https://dns.cloudflare.com/dns-query
        - --fallback=https://8.8.8.8/dns-query
        - --fallback=https://8.8.4.4/dns-query 
        - --http3
        - --bootstrap=8.8.8.8:53
        - --all-servers
        livenessProbe:
          tcpSocket:
            port: 5353
        readinessProbe:
          tcpSocket:
            port: 5353
      dnsConfig:
        nameservers:
        - 127.0.0.1
        - 8.8.8.8
      dnsPolicy: None
      hostNetwork: false
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - node3
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - pihole
            topologyKey: "kubernetes.io/hostname"
      volumes:
      - emptyDir: {}
        name: config
      - configMap:
          defaultMode: 420
          name: pihole-custom-dnsmasq
        name: custom-dnsmasq
      - configMap:
          defaultMode: 420
          name: pihole-custom-lists
        name: custom-lists
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pihole
  labels:
    app: pihole
  annotations:
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-name: "PHPSESSID"
    nginx.ingress.kubernetes.io/session-cookie-expires: "7200"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "7200"
    gethomepage.dev/description: DNS & Ad Blocker
    gethomepage.dev/enabled: "true"
    gethomepage.dev/group: Networking
    gethomepage.dev/icon: pi-hole.png
    gethomepage.dev/name: pihole
    gethomepage.dev/href: https://pihole.home.com/admin/
    gethomepage.dev/weight: "30"
    gethomepage.dev/widget.type: pihole
    gethomepage.dev/widget.url: http://pihole-web.utilities.svc:80
    gethomepage.dev/widget.key: "{{HOMEPAGE_VAR_PIHOLE_KEY}}"
spec:
  rules:
  - host: pihole.home.com
    http:
      paths:
      - backend:
          service:
            name: pihole-web
            port:
              name: http
        path: /
        pathType: ImplementationSpecific
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: dns-ip-fixer
  labels:
    app: dns-ip-fixer
spec:
  selector:
    matchLabels:
      app: dns-ip-fixer
  template:
    metadata:
      labels:
        app: dns-ip-fixer
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: dns-ip-fixer
        image: pihole/pihole:latest
        command: ["/bin/bash"]
        args:
        - -c
        - |
          set -ex
          INTERFACE=$(ip route show default | awk '{print $5}')
          GATEWAY=$(ip route show default | awk '{print $3}')
          TABLE=10
          ip route show table ${TABLE} | grep "default via ${GATEWAY} dev ${INTERFACE}" || \
            ip route add default via ${GATEWAY} dev ${INTERFACE} table ${TABLE}
          ip rule show table ${TABLE} | grep "from y.y.y.y
            ip rule add from y.y.y.y
          sleep inf
        securityContext:
          runAsUser: 0
          runAsGroup: 0
          capabilities:
            add:
            - NET_ADMIN
---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    helm.sh/hook: test
  name: pihole-smoke-test
spec:
  containers:
  - command:
    - sh
    - -c
    - curl http://pihole-web:80/
    image: curlimages/curl
    imagePullPolicy: IfNotPresent
    name: hook1-container
  restartPolicy: Never
  terminationGracePeriodSeconds: 0
