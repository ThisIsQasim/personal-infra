---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-dns
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-dns
rules:
- apiGroups:
  - ""
  resources:
  - services
  - pods
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - networking.istio.io
  resources:
  - gateways
  - virtualservices
  verbs:
  - get
  - watch
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-dns-viewer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-dns
subjects:
- kind: ServiceAccount
  name: external-dns
  namespace: utilities
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pihole-static-files
  labels:
    app: pihole
data:
  proxy.pac: |
    function FindProxyForURL(url, host) {
      if (
        dnsDomainIs(host, ".home.com") ||
        dnsDomainIs(host, ".slack.com") ||
        dnsDomainIs(host, ".slackb.com") ||
        dnsDomainIs(host, ".slack-edge.com") ||
        dnsDomainIs(host, ".slack-imgs.com") ||
        dnsDomainIs(host, ".chime.aws") ||
        dnsDomainIs(host, ".mask.icloud.com") ||
        dnsDomainIs(host, ".mask-h2.icloud.com") ||
        isInNet(host, "y.y.y.y
        ) {
        return "DIRECT";
      }
      return "SOCKS y.y.y.y
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pihole-custom-dnsmasq
  labels:
    app: pihole
data:
  02-custom.conf: |
    rev-server=y.y.y.y
    server=/home.home.com/y.y.y.y
    server=//y.y.y.y
  05-custom-list.conf: |
    addn-hosts=/etc/pihole/custom.list
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pihole-custom-lists
  labels:
    app: pihole
data:
  custom.list: |
    y.y.y.y
    y.y.y.y
    y.y.y.y
  regex.list: |
    (^|\.)tunnelbear\.com$
    (^|\.)acloudvideos\.com$
    (^|\.)home\.com;querytype=HTTPS
  blacklist.txt: |
    www.hibids10.com
    api.tunnelbear.com
    doh.dns.apple
  whitelist.txt: |
    thepiratebay.org
    slides.google.com
    rpm.newrelic.com
    www.rapidvideo.com
    ip-api.com
    pro.ip-api.com
    one.newrelic.com
    trace.svc.ui.com
    cdn.jsdelivr.net
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: pihole
  labels:
    app: pihole
spec:
  dnsNames:
  - "pihole.home.com"
  issuerRef:
    group: cert-manager.io
    kind: ClusterIssuer
    name: letsencrypt
  secretName: pihole-cert
  additionalOutputFormats:
  - type: CombinedPEM
  usages:
  - digital signature
  - key encipherment
---
apiVersion: v1
kind: Service
metadata:
  name: pihole
  labels:
    app: pihole
  annotations:
    kube-vip.io/loadbalancerIPs: y.y.y.y
spec:
  externalTrafficPolicy: Local
  clusterIP: y.y.y.y
  ports:
  - name: dns
    port: 53
    protocol: TCP
    targetPort: dns
  - name: dns-udp
    port: 53
    protocol: UDP
    targetPort: dns-udp
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  - name: https
    port: 443
    protocol: TCP
    targetPort: https
  selector:
    app: pihole
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: pihole
  name: pihole
spec:
  replicas: 2
  selector:
    matchLabels:
      app: pihole
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: pihole
    spec:
      initContainers:
      - name: copy-config
        image: ghcr.io/pi-hole/pihole:2025.08.0
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - mountPath: /etc/pihole
          name: config
        - mountPath: /etc/pihole-lists
          name: custom-lists
        command: ["/bin/bash"]
        args:
        - -c
        - cp /etc/pihole-lists/* /etc/pihole/
      - name: dnsproxy
        image: adguard/dnsproxy:v0.76.1
        imagePullPolicy: IfNotPresent
        restartPolicy: Always
        args:
        - --port=5353
        - --upstream=https://1.1.1.1/dns-query
        - --upstream=https://1.0.0.1/dns-query
        - --upstream=https://dns.cloudflare.com/dns-query
        - --fallback=https://8.8.8.8/dns-query
        - --fallback=https://8.8.4.4/dns-query 
        - --http3
        - --bootstrap=8.8.8.8:53
        - --upstream-mode=load_balance
        livenessProbe:
          exec:
            command:
            - /usr/bin/nslookup
            - -port=5353
            - apple.com
            - 127.0.0.1
          failureThreshold: 20
          periodSeconds: 6
        readinessProbe:
          exec:
            command:
            - /usr/bin/nslookup
            - -port=5353
            - apple.com
            - 127.0.0.1
          failureThreshold: 2
        resources:
          requests:
            cpu: 50m
          limits:
            memory: 200Mi
      containers:
      - name: pihole
        image: ghcr.io/pi-hole/pihole:2025.08.0
        imagePullPolicy: IfNotPresent
        restartPolicy: Always
        env:
        - name: TZ
          value: 'Asia/Karachi'
        - name: FTLCONF_webserver_domain
          value: "pihole.home.com"
        - name: FTLCONF_dns_upstreams
          value: 127.0.0.1#5353
        - name: FTLCONF_dhcp_active
          value: "false"
        - name: FTLCONF_resolver_resolveIPv6
          value: "false"
        - name: FTLCONF_dns_listeningMode
          value: "ALL"
        - name: FTLCONF_dns_blockESNI
          value: "false"
        - name: FTLCONF_dns_EDNS0ECS
          value: "false"
        - name: FTLCONF_dns_specialDomains_iCloudPrivateRelay
          value: "false"
        - name: FTLCONF_dns_dnssec
          value: "false"
        - name: FTLCONF_misc_etc_dnsmasq_d
          value: "true"
        - name: FTLCONF_webserver_tls_cert
          value: "/etc/pihole/tls.pem"
        envFrom:
        - secretRef:
            name: pihole
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 53
          name: dns
          protocol: TCP
        - containerPort: 53
          name: dns-udp
          protocol: UDP
        - containerPort: 443
          name: https
          protocol: TCP
        - containerPort: 67
          name: client-udp
          protocol: UDP
        startupProbe:
          exec:
            command:
            - /usr/bin/nslookup
            - pi.hole
            - 127.0.0.1
          failureThreshold: 60
          periodSeconds: 5
        livenessProbe:
          exec:
            command:
            - /usr/bin/nslookup
            - pi.hole
            - 127.0.0.1
          failureThreshold: 10
        readinessProbe:
          exec:
            command:
            - /usr/bin/nslookup
            - pi.hole
            - 127.0.0.1
          failureThreshold: 2
        resources:
          requests:
            cpu: 50m
          limits:
            memory: 100Mi
        securityContext:
          privileged: false
          capabilities:
            add: ["SYS_NICE", "SYS_TIME"]
        volumeMounts:
        - mountPath: /etc/pihole
          name: config
        - mountPath: /etc/dnsmasq.d/
          name: custom-dnsmasq
          readOnly: false
        - mountPath: /etc/pihole/tls.pem
          name: tls-cert
          subPath: tls-combined.pem
          readOnly: true
        - mountPath: /var/www/html/admin/static
          name: static-files
      - name: external-dns
        image: registry.k8s.io/external-dns/external-dns:v0.18.0
        # If authentication is disabled and/or you didn't create
        # a secret, you can remove this block.
        env:
        - name: EXTERNAL_DNS_PIHOLE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pihole
              key: FTLCONF_webserver_api_password
              optional: true
        args:
        - --source=service
        - --source=ingress
        - --domain-filter=home.com
        - --annotation-filter=external-dns.alpha.kubernetes.io/exclude notin (true)
        # Pihole only supports A/CNAME records so there is no mechanism to track ownership.
        # You don't need to set this flag, but if you leave it unset, you will receive warning
        # logs when ExternalDNS attempts to create TXT records.
        - --registry=noop
        # IMPORTANT: If you have records that you manage manually in Pi-hole, set
        # the policy to upsert-only so they do not get deleted.
        - --policy=upsert-only
        - --provider=pihole
        - --pihole-api-version=6
        # Change this to the actual address of your Pi-hole web server
        - --pihole-server=http://127.0.0.1
      dnsConfig:
        nameservers:
        - 127.0.0.1
        - 8.8.8.8
      dnsPolicy: None
      hostNetwork: false
      serviceAccountName: external-dns
      securityContext:
        fsGroup: 65534 # For ExternalDNS to be able to read Kubernetes token files
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - node3
                - node1
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - pihole
            topologyKey: "kubernetes.io/hostname"
      volumes:
      - emptyDir: {}
        name: config
      - configMap:
          defaultMode: 420
          name: pihole-custom-dnsmasq
        name: custom-dnsmasq
      - configMap:
          defaultMode: 420
          name: pihole-custom-lists
        name: custom-lists
      - configMap:
          defaultMode: 420
          name: pihole-static-files
        name: static-files
      - secret:
          secretName: pihole-cert
        name: tls-cert
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pihole
  labels:
    app: pihole
  annotations:
    external-dns.alpha.kubernetes.io/exclude: "true"
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-name: "PHPSESSID"
    nginx.ingress.kubernetes.io/session-cookie-expires: "7200"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "7200"
    gethomepage.dev/description: DNS & Ad Blocker
    gethomepage.dev/enabled: "true"
    gethomepage.dev/group: Networking
    gethomepage.dev/icon: pi-hole.png
    gethomepage.dev/name: Pi-hole
    gethomepage.dev/pod-selector: app=pihole
    gethomepage.dev/href: https://pihole.home.com/admin/
    gethomepage.dev/weight: "30"
    gethomepage.dev/widget.type: pihole
    gethomepage.dev/widget.version: "6"
    gethomepage.dev/widget.url: http://pihole.utilities.svc:80
    gethomepage.dev/widget.key: "{{HOMEPAGE_VAR_PIHOLE_KEY}}"
spec:
  rules:
  - host: pihole.home.com
    http:
      paths:
      - backend:
          service:
            name: pihole
            port:
              name: http
        path: /
        pathType: ImplementationSpecific
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: dns-ip-fixer
  labels:
    app: dns-ip-fixer
spec:
  selector:
    matchLabels:
      app: dns-ip-fixer
  template:
    metadata:
      labels:
        app: dns-ip-fixer
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      initContainers:
      - image: ghcr.io/pi-hole/pihole:2025.08.0
        imagePullPolicy: IfNotPresent
        name: sysctler
        securityContext:
          privileged: true
        command: ["/bin/bash"]
        args:
        - -c
        - sysctl -w net.core.rmem_max=7500000 net.core.wmem_max=7500000 net.core.somaxconn=32768 net.ipv4.ip_local_port_range='1024 65000'
      containers:
      - name: dns-ip-fixer
        image: ghcr.io/pi-hole/pihole:2025.08.0
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash"]
        args:
        - -c
        - |
          set -ex
          INTERFACE=$(ip route show | grep default | awk '{print $5}')
          GATEWAY=$(ip route show | grep default | awk '{print $3}')
          TABLE=10
          ip route show table ${TABLE} | grep "default via ${GATEWAY} dev ${INTERFACE}" || \
            ip route add default via ${GATEWAY} dev ${INTERFACE} table ${TABLE}
          ip rule show table ${TABLE} | grep "from y.y.y.y
            ip rule add from y.y.y.y
            ip rule add from y.y.y.y
          sleep inf
        securityContext:
          runAsUser: 0
          runAsGroup: 0
          capabilities:
            add:
            - NET_ADMIN
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: pihole
  labels:
    app: pihole
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: pihole
---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    helm.sh/hook: test
  name: pihole-smoke-test
spec:
  containers:
  - command:
    - sh
    - -c
    - curl http://pihole-web:80/
    image: ghcr.io/pi-hole/pihole:2025.08.0
    imagePullPolicy: IfNotPresent
    name: hook1-container
  restartPolicy: Never
  terminationGracePeriodSeconds: 0
