---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mqtt
  labels:
    app: mqtt
data:
  mosquitto.conf: |
    listener 1883

    persistence true
    persistence_location /mosquitto/data/

    allow_anonymous false
    password_file /mosquitto/config/passwd

    log_dest stdout
  configure.sh: |
    #/bin/sh -ec
    mosquitto_passwd -c -b /runtime/passwd ${MQTT_USERNAME} ${MQTT_PASSWORD}
    cp /mosquitto/config/mosquitto.conf /runtime/

    echo "Running on $MY_NODE_NAME"

    if [ "${MY_NODE_NAME}" == "node3" ]; then
      echo "Adding bridge config"
      cat <<EOF >> /runtime/mosquitto.conf;

    connection ha-bridge
    address mqtt-node2:1883
    bridge_insecure false
    remote_username ${MQTT_USERNAME}
    remote_password ${MQTT_PASSWORD}
    local_username ${MQTT_USERNAME}
    local_password ${MQTT_PASSWORD}
    remote_clientid ${MY_NODE_NAME}
    try_private true
    topic zigbee2mqtt/# both 0
    EOF
    else
      echo "Skipping bridge conf"
    fi
---
apiVersion: v1
kind: Service
metadata:
  name: mqtt
  labels:
    app: mqtt
    node: node2
  annotations:
    kube-vip.io/loadbalancerIPs: y.y.y.y
spec:
  ports:
  - port: 1883
  type: LoadBalancer
  externalTrafficPolicy: Local
  selector:
    app: mqtt
    node: node2
---
apiVersion: v1
kind: Service
metadata:
  name: mqtt-node2
  labels:
    app: mqtt
    node: node2
spec:
  ports:
  - port: 1883
  type: ClusterIP
  clusterIP: None
  selector:
    app: mqtt
    node: node2
---
apiVersion: v1
kind: Service
metadata:
  name: mqtt-node3
  labels:
    app: mqtt
    node: node3
spec:
  ports:
  - port: 1883
  type: ClusterIP
  clusterIP: None
  selector:
    app: mqtt
    node: node3
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mqtt-node2
  labels:
    app: mqtt
    node: node2
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: mqtt
      node: node2
  template:
    metadata:
      labels:
        app: mqtt
        node: node2
    spec:
      initContainers:
      - name: config
        image: public.ecr.aws/docker/library/eclipse-mosquitto:2.0.18
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        - /configure.sh
        env:
        - name: MY_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        envFrom:
        - secretRef:
            name: mqtt
        volumeMounts:
        - name: runtime
          mountPath: /runtime
        - name: config
          mountPath: /mosquitto/config/mosquitto.conf
          subPath: mosquitto.conf
        - name: config
          mountPath: /configure.sh
          subPath: configure.sh
      containers:
      - name: mqtt
        image: public.ecr.aws/docker/library/eclipse-mosquitto:2.0.18
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 200m
          limits:
            memory: "1Gi"
        ports:
        - name: mqtt
          containerPort: 1883
        readinessProbe:
          tcpSocket:
            port: 1883
        volumeMounts:
        - name: runtime
          mountPath: /mosquitto/config
        - name: database
          mountPath: /mosquitto/data
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
      - name: mqtt-exporter
        image: ghcr.io/kpetremann/mqtt-exporter:1.4.7
        imagePullPolicy: IfNotPresent
        env:
        - name: MQTT_ADDRESS
          value: 127.0.0.1
        - name: ZIGBEE2MQTT_AVAILABILITY
          value: "True"
        envFrom:
        - secretRef:
            name: mqtt
        resources:
          requests:
            cpu: 20m
          limits:
            memory: "200Mi"
        ports:
        - name: metrics
          containerPort: 9000
        readinessProbe:
          tcpSocket:
            port: 9000
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
      volumes:
      - name: config
        configMap:
          name: mqtt
      - name: runtime
        emptyDir: {}
      - name: database
        hostPath:
          path: /home/ha/mqtt
          type: Directory
      enableServiceLinks: false
      terminationGracePeriodSeconds: 30
      securityContext:
        fsGroup: 1883
        runAsUser: 1883
      nodeSelector:
        kubernetes.io/hostname: node2
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mqtt-node3
  labels:
    app: mqtt
    node: node3
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: mqtt
      node: node3
  template:
    metadata:
      labels:
        app: mqtt
        node: node3
    spec:
      initContainers:
      - name: config
        image: public.ecr.aws/docker/library/eclipse-mosquitto:2.0.18
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        - /configure.sh
        env:
        - name: MY_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        envFrom:
        - secretRef:
            name: mqtt
        volumeMounts:
        - name: runtime
          mountPath: /runtime
        - name: config
          mountPath: /mosquitto/config/mosquitto.conf
          subPath: mosquitto.conf
        - name: config
          mountPath: /configure.sh
          subPath: configure.sh
      containers:
      - name: mqtt
        image: public.ecr.aws/docker/library/eclipse-mosquitto:2.0.18
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 200m
          limits:
            memory: "1Gi"
        ports:
        - name: mqtt
          containerPort: 1883
        readinessProbe:
          tcpSocket:
            port: 1883
        volumeMounts:
        - name: runtime
          mountPath: /mosquitto/config
        - name: database
          mountPath: /mosquitto/data
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
      - name: mqtt-exporter
        image: ghcr.io/kpetremann/mqtt-exporter:1.4.7
        imagePullPolicy: IfNotPresent
        env:
        - name: MQTT_ADDRESS
          value: 127.0.0.1
        - name: ZIGBEE2MQTT_AVAILABILITY
          value: "True"
        envFrom:
        - secretRef:
            name: mqtt
        resources:
          requests:
            cpu: 20m
          limits:
            memory: "200Mi"
        ports:
        - name: metrics
          containerPort: 9000
        readinessProbe:
          tcpSocket:
            port: 9000
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
      volumes:
      - name: config
        configMap:
          name: mqtt
      - name: runtime
        emptyDir: {}
      - name: database
        hostPath:
          path: /home/ha/mqtt
          type: Directory
      enableServiceLinks: false
      terminationGracePeriodSeconds: 30
      securityContext:
        fsGroup: 1883
        runAsUser: 1883
      nodeSelector:
        kubernetes.io/hostname: node3
---
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: mqtt
  labels:
    app: mqtt
    release: kube-prometheus-stack
spec:
  selector:
    matchLabels:
      app: mqtt
  podMetricsEndpoints:
  - port: metrics
